#!/bin/bash
###############################################################################
#
# Â© Copyright IBM Corp. 2023
#
###############################################################################

function compactUsage() {
    echo "Usage:"
    echo "ibm-events-must-gather [-m GATHER_MODULES] [-n NAMESPACE | --es-namespace NAMESPACE | --eem-namespace NAMESPACE | --ep-namespace NAMESPACE] [-i IMAGE] [-h]"
    echo ""
    echo "Options:"
    echo "  -h: Show full help message."
    echo "  -i: The address of the image to be used for the gather. By default this uses icr.io/cpopen/ibm-eventstreams-must-gather."
    echo "  -m: Define the data module(s) that specifies what type of information is collected. Run with -h, to see full list of available data modules."
    echo "  -n: Specify the namespace from which the data is collected. If specifying more than one of eventstreams, eem and eventprocessing modules, individual namespace flags must be used."
    echo "  --es-namespace: The namespace from which the eventstreams data is collected."
    echo "  --eem-namespace: The namespace from which the eem data is collected."
    echo "  --ep-namespace: The namespace from which the eventprocessing data is collected."
}


function usage() {
    echo ""
    echo "Description:"
    echo "A tool to gather logs and other debugging information for the following:"
    echo ""
    echo "  - IBM Event Streams"
    echo "  - IBM Event Endpoint Management"
    echo "  - IBM Event Processing"
    echo ""
    echo "Output:"
    echo "This command will set up a pod in an ephemeral namespace that gathers logs from the cluster. The gathered information is compressed and then copied to the users "
    echo "local machine as a tar.gz file."
    echo ""
    compactUsage
    echo ""
    echo "Available data modules:"
    echo "  overview                Version"
    echo "                          List of nodes"
    echo "                          List of all basic Kubernetes resource"
    echo "                          List of secrets without secret details"
    echo "                          Cluster status and dependencies that are provided by the IBM System Healthcheck service"
    echo "  eventstreams            Resources relating to instances of eventstreams"
    echo "                          Resources relating to the eventstreams operator"
    echo "                          Resources relating to instances of kafka connect"
    echo "  kafka                   Gathering internal metrics from the Kafka environment"
    echo "  schema                  Gathering internal information from the Schema Registry"
    echo "  eventprocessing         Resources relating to instances of event processing"
    echo "                          Resources relating to the event processing operator"
    echo "  eem                     Resources relating to instances of event endpoint management"
    echo "                          Resources relating to the event endpoint management operator"
    echo "  failure                 Unhealthy pods and their logs"
    echo "                          Unhealthy deployments, daemonsets, statefulsets and jobs"
    echo "                          Unhealthy routes and services"
    echo "                          Unhealthy pv and pvc"
    echo "                          Unhealthy namespaces"
    echo "  system                  /proc/cpuinfo on master nodes"
    echo "                          /proc/meminfo on master nodes"
    echo "                          dmesg on master nodes"
    echo "                          IP address on master nodes"
    echo "                          iptables, ovs-vswitchd data and log on master nodes"
    echo "                          df -h on master nodes"
    echo "                          kubelet and crio log on master nodes"
    echo ""
    echo "Specifying namespaces:"
    echo "  If only one of eventstreams, eventprocessing or eem is specified in the list of modules, you simply specify the relevant namespace"
    echo "  using the -n flag."
    echo ""
    echo "  If multiple products are being specified, then you MUST utilise the individual namespace flags for each module:"
    echo ""
    echo "    --es-namespace: the namespace from which the eventstreams data is collected."
    echo "    --eem-namespace: the namespace from which the eem data is collected."
    echo "    --ep-namespace: the namespace from which the eventprocessing data is collected."
    echo ""
    echo ""
    echo "Examples: "
    echo "# Gather information on the Event Streams instance in the \"es\" namespace."
    echo "ibm-events-must-gather -m eventstreams -n es"
    echo ""
    echo "# Gather information on the Event Streams instance in the \"events\" namespace, the Event Endpoint Management instance in the \"management\" namespace as well as cluster logs information. "
    echo "ibm-events-must-gather -m eventstreams,eem,system --es-namespace events --eem-namespace management"
    echo ""
    echo "# Gather information on the Event Processing instance in the \"processing\" namespace as well as cluster logs information in an offline (airgapped) environment. "
    echo "event-streams-must-gather -m eventprocessing,system -n processing -i <private-registry:tag> "
    echo ""
}

function teardown ()
{
  kubectl delete -f  must-gather-job.yaml
  kubectl delete -f  role.yaml
  kubectl delete -f  service-account.yaml
  kubectl delete -f  role-binding.yaml
  kubectl delete -f  namespace.yaml

  rm -rf must-gather-job.yaml
  rm -rf role.yaml
  rm -rf service-account.yaml
  rm -rf role-binding.yaml
  rm -rf namespace.yaml
}

function trapCtrlc ()
{
  echo "    Ctrl+c caught proceeding to abandon and tear down resources."  
  teardown
  echo "Tear down complete."
  exit 2
}

function setup ()
{
  # Set up -  need to build a service account and other bits to allow kubectl to run from the created pods
  namespaceUid=$(openssl rand -base64 20 | tr -dc a-z0-9 | head -c 6)
  if [ -z $test ]
  then
    export mustgatherNamespace="ibm-events-must-gather-${namespaceUid}"
  else
    export mustgatherNamespace="ibm-events-must-gather-test"
  fi

  cp -a ./template-yaml/. .

  ${SED} -i "s|MUSTGATHER_NAMESPACE_PLACEHOLDER|${mustgatherNamespace}|g" namespace.yaml
  ${SED} -i "s|MUSTGATHER_NAMESPACE_PLACEHOLDER|${mustgatherNamespace}|g" role-binding.yaml
  ${SED} -i "s|MUSTGATHER_NAMESPACE_PLACEHOLDER|${mustgatherNamespace}|g" service-account.yaml
  ${SED} -i "s|MUSTGATHER_NAMESPACE_PLACEHOLDER|${mustgatherNamespace}|g" must-gather-job.yaml

  if [ "${products}" -gt 1 ]; then
    gatherCommand="gather -m ${gatherModules} "
    if [ -n "${esNamespace}" ]; then
      gatherCommand="${gatherCommand} --es-namespace ${esNamespace} "
    fi
    if [ -n "${epNamespace}" ]; then
      gatherCommand="${gatherCommand} --ep-namespace ${epNamespace} "
    fi
    if [ -n "${eemNamespace}" ]; then
      gatherCommand="${gatherCommand} --eem-namespace ${eemNamespace} "
    fi
    export gatherCommand
  else
    export gatherCommand="gather -m ${gatherModules} -n ${instanceNamespace}"
  fi

  ${SED} -i "s|GATHER_COMMAND_PLACEHOLDER|${gatherCommand}|g" must-gather-job.yaml

  export gatherImage="${image}"

  ${SED} -i "s|GATHER_IMAGE_PLACEHOLDER|${gatherImage}|g" must-gather-job.yaml
  ${SED} -i "s|COPY_IMAGE_PLACEHOLDER|${gatherImage}|g" must-gather-job.yaml
  
  # Create namespace

  kubectl apply -f namespace.yaml


  kubectl config set-context --current --namespace="$mustgatherNamespace"
  # Set-up cluster admin credentials for gather scripts


  kubectl apply -f service-account.yaml
  kubectl apply -f role.yaml
  kubectl apply -f role-binding.yaml
}

trap "trapCtrlc" 2

instanceNamespace=""
gatherModules=""
image=""
test=""
esNamespace=""
eemNamespace=""
epNamespace=""

while [[ $# -gt 0 ]]; do
  case $1 in
    "-h") usage
          exit 0
          ;;
    "-n") instanceNamespace="$2"
          shift 2
          ;;
    "-t") test="test"
          shift 2
          ;;
    "-m") gatherModules="$2"
          shift 2
          ;;
    "-i") image="$2"
          shift 2
          ;;
    "--es-namespace") esNamespace="$2"
           shift 2
           ;;
    "--ep-namespace") epNamespace="$2"
           shift 2
           ;;
    "--eem-namespace") eemNamespace="$2"
           shift 2
           ;;
    *) echo "Invalid argument ${1}"
       echo ""
       compactUsage
       exit 1
       ;;
  esac
done

export products=0
module_array=(${gatherModules//,/ })

# Check number of product modules and error for unknown modules
for m in ${module_array[@]}
do
  case $m in
    "eventstreams"|"eem"|"eventprocessing")
      let products+=1
      ;;
    "overview"|"kafka"|"schema"|"failure"|"system")
      ;;
    *)
      echo "unknown module specified: ${m}"
      exit 8
      ;;
  esac
done

if [ $products -gt 1 ]; then
  if [ -n "$instanceNamespace" ]; then
    echo "-n is not a valid flag when multiple modules specified, use individual flags:"
    echo ""
    compactUsage
    exit 2
  fi

  #check namespace flags
  for m in ${module_array[@]}
  do
    case $m in
      "eventstreams")
        if [ -z "${esNamespace}" ]; then
          echo "you must indicate the eventstreams namespace using the --es-namespace flag"
          exit 3
        fi
        ;;
      "eem")
        if [ -z "${eemNamespace}" ]; then
          echo "you must indicate the eem namespace using the --eem-namespace flag"
          exit 4
        fi
        ;;
      "eventprocessing")
        if [ -z "${epNamespace}" ]; then
          echo "you must indicate the eventprocessing namespace using the --ep-namespace flag"
          exit 5
        fi
        ;;
    esac
  done
else
  if [ -z "$instanceNamespace" ]
  then
        echo "The must-gather requires a namespace to be scanned."
        echo ""
        compactUsage
        exit 1
  fi
fi

KUBECTL_PRESENCE=$(command -v "kubectl" > /dev/null; echo ${?})
OPENSSL_PRESENCE=$(command -v "openssl" > /dev/null; echo ${?})
GSED_PRESENCE=$(command -v "gsed" > /dev/null; echo ${?})
SED_PRESENCE=$(command -v "sed" > /dev/null; echo ${?})

UNAME_S=$(uname -s)

SED=sed
if [ "$UNAME_S" = "Darwin" ];
then
  SED=gsed
fi

# Check if sed is suitable for use
GNU_SED_CHECK=$(${SED} --version | grep "(GNU sed)")

if [ -n "${GNU_SED_CHECK}" ];
then
  GNU_SED_PRESENCE=0
else
  GNU_SED_PRESENCE=1
fi


if [ $KUBECTL_PRESENCE -eq 1 ] || [ $OPENSSL_PRESENCE -eq 1 ] || [ $GNU_SED_PRESENCE -eq 1 ]
then
      echo 'You must have kubectl (or oc) openssl and sed (GNU sed) installed to run diagnostics. On linux (and bash for windows) GNU sed is called sed, for mac OS GNU sed is called gsed'
      exit 6
fi

if [ -z "$gatherModules" ]
then
    echo "The must-gather requires at least one module to be specified."
    echo ""
    compactUsage
    exit 7
fi

if [ -z "$image" ]
then
      echo "Using default image: icr.io/cpopen/ibm-eventstreams-must-gather"
      image="icr.io/cpopen/ibm-eventstreams-must-gather"
fi

setup

# Run the gather

kubectl apply -f must-gather-job.yaml

PODS=""
i=0
while : ; do
  PODS=$(kubectl get pods -n ${mustgatherNamespace} | grep ibm-events-must-gather | grep 2/2)
  if [ "$PODS" ]; then
      break
  fi
  if [ $i -gt 180 ]; then
      echo "The must gather pods failed to start correctly. Please try again and if the problem persists contact IBM support for further advice."
      trapCtrlc
  fi
  sleep 1
  i=$(( $i + 1 ))
done

kubectl logs job/ibm-events-must-gather -c gather -f

POD_NAME=$(kubectl get pods -n ${mustgatherNamespace} -o custom-columns=":metadata.name" | grep ibm-events-must-gather)

GATHER_TAR_FILE_NAME=$(kubectl exec $POD_NAME -c copy -- ls must-gather | grep ibm-events-must-gather)

kubectl cp ${mustgatherNamespace}/$POD_NAME:must-gather/$GATHER_TAR_FILE_NAME ./$GATHER_TAR_FILE_NAME -c copy --retries=-1

echo "copy done"

teardown
